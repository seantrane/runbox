FROM ruby:2.6 as devbox

ARG WORK_DIR
ENV WORK_DIR "${WORK_DIR:-/mnt/pwd}"

ARG GROUP_ID=1000
ARG GROUP_NAME=dev
ARG USER_ID=1000
ARG USER_NAME=dev

ENV LANG C.UTF-8

ARG NODE_VERSION=12
ARG TERRAFORM_VERSION=0.12.29
ARG VAULT_VERSION=1.4.1

ENV AWS_CLI_FILE_ENCODING "UTF-8"
ENV AWS_DEFAULT_OUTPUT "json"
ENV AWS_DEFAULT_REGION "us-east-1"

ARG OPENJDK_VERSION=11
ARG OPENJDK_BUILD=11+28
ENV JAVA_HOME "/opt/openjdk-${OPENJDK_VERSION}"
ENV PATH "${JAVA_HOME}/bin:$PATH"

ARG GRADLE_VERSION=6.4.1
ENV GRADLE_HOME "/opt/gradle"
ARG MAVEN_VERSION=3.6.3
ENV MAVEN_HOME "/opt/maven"
ENV MAVEN_CONFIG "/home/${USER_NAME}/.m2"
ARG FLYWAY_VERSION=6.4.2
ENV FLYWAY_HOME "/opt/flyway"

LABEL \
  "id"="com.seantrane.runbox.devbox" \
  "name"="DevBox" \
  "version"="1.0.0" \
  "description"="A portable shell environment and toolkit for software/ops engineers, using Docker." \
  "maintainer"="https://github.com/seantrane" \
  "repository"="https://github.com/seantrane/runbox" \
  "issues"="https://github.com/seantrane/runbox/issues" \
  "license"="ISC" \
  "build_timestamp"="$(date +%s)"

SHELL ["/bin/bash", "-c"]

RUN set -x \
  && echo -e "\n\n USER ❯ ${USER:-$(id -un 2> /dev/null || echo "\u")} @ ${HOST:-${HOSTNAME:-$(hostname 2> /dev/null || echo "\h")}} (${LANG:-}) \n\n SYSTEM ❯ ${UMACH:-${MACHTYPE:-$(uname -m 2> /dev/null)}} \n\n SHELL ❯ $(${SHELL:-} --version | head -n 1) \n\n" \
  # Add non-root user/group.
  && groupadd -r -g "${GROUP_ID}" "${GROUP_NAME}" \
  && useradd -r -g "${GROUP_NAME}" -u "${USER_ID}" -m -s "/bin/bash" "${USER_NAME}" \
  && usermod -aG sudo "${USER_NAME}" \
  && cat "/etc/passwd" \
  && ls -lahF --time-style=long-iso --color "/home" \
  && ls -lahF --time-style=long-iso --color "/home/${USER_NAME}" \
  \
  # Install core dependencies.
  && apt-get update && apt-get install --no-install-recommends --no-install-suggests -yq \
    apt-utils \
    automake \
    build-essential \
    ca-certificates \
    gnupg \
    sudo \
  && rm -rf /var/lib/apt/lists/* \
  \
  # Install system dependencies.
  && apt-get update && apt-get install --no-install-recommends --no-install-suggests -yq \
    ack \
    bash \
    bash-completion \
    bash-doc \
    curl \
    dnsutils \
    git \
    grc \
    jq \
    less \
    mercurial \
    openssh-client \
    openssh-server \
    p7zip \
    shellcheck \
    subversion \
    tree \
    unzip \
    zip \
  && rm -rf /var/lib/apt/lists/* \
  \
  # Set Bash as default shell.
  && sed -i -e "s/bin\/sh/bin\/bash/" /etc/passwd \
  && cat "/etc/passwd" \
  && command -v bash && bash --version \
  \
  && git clone "https://github.com/bats-core/bats-core.git" /tmp/bats-core \
  && /tmp/bats-core/install.sh /usr/local \
  && rm -rf /tmp/bats-core \
  \
  # Install Java/OpenJDK, Maven and Gradle.
  && mkdir -p "${JAVA_HOME}" \
  && curl -OsL "https://download.java.net/openjdk/jdk${OPENJDK_VERSION}/ri/openjdk-${OPENJDK_BUILD}_linux-x64_bin.tar.gz" \
  && tar -xzf "openjdk-${OPENJDK_BUILD}_linux-x64_bin.tar.gz" -C "${JAVA_HOME}" --strip-components 1 --no-same-owner \
  && rm -f "openjdk-${OPENJDK_BUILD}_linux-x64_bin.tar.gz" \
  && for file in ${JAVA_HOME}/bin/*; do ln -s "${file}" "/usr/bin/$(basename "${file%.*}")"; done \
  && ( \
    find "${JAVA_HOME}/lib" -name '*.so' -exec dirname '{}' ';' | sort -u > "/etc/ld.so.conf.d/docker-openjdk.conf"; \
    ldconfig; \
  ) \
  && command -v java && java --version \
  \
  && mkdir -p "${GRADLE_HOME}" \
  && curl -OsL "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip" \
  && unzip "gradle-${GRADLE_VERSION}-bin.zip" -d "${GRADLE_HOME}" \
  && rm -f "gradle-${GRADLE_VERSION}-bin.zip" \
  && ln -s "${GRADLE_HOME}/gradle-${GRADLE_VERSION}/bin/gradle" /usr/bin/gradle \
  && command -v gradle && gradle --version \
  \
  && mkdir -p "${MAVEN_HOME}" "${MAVEN_HOME}/ref" \
  && curl -OsL "https://apache.osuosl.org/maven/maven-${MAVEN_VERSION:0:1}/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz" \
  && tar -xzf "apache-maven-${MAVEN_VERSION}-bin.tar.gz" -C "${MAVEN_HOME}" --strip-components=1 \
  && rm -f "apache-maven-${MAVEN_VERSION}-bin.tar.gz" \
  && ln -s "${MAVEN_HOME}/bin/mvn" /usr/bin/mvn \
  && command -v mvn && mvn --version \
  \
  && mkdir -p "${FLYWAY_HOME}" \
  && curl -OsL "https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/${FLYWAY_VERSION}/flyway-commandline-${FLYWAY_VERSION}.tar.gz" \
  && tar -xzf "flyway-commandline-${FLYWAY_VERSION}.tar.gz" -C "${FLYWAY_HOME}" --strip-components=1 \
  && rm -f "flyway-commandline-${FLYWAY_VERSION}.tar.gz" \
  && ln -s "${FLYWAY_HOME}/flyway" /usr/bin/flyway \
  && command -v flyway \
  \
  # Install Node.js/npm.
  && curl -sL "https://deb.nodesource.com/setup_${NODE_VERSION}.x" | sudo -E bash - \
  && sudo apt-get install --no-install-recommends --no-install-suggests -yq \
    nodejs \
  && rm -rf /var/lib/apt/lists/* \
  && command -v node && node --version \
  && command -v npm && npm --version \
  \
  # Install AWS-CLI, Python 2/3, Terraform and Vault.
  && apt-get update && apt-get install --no-install-recommends --no-install-suggests -yq \
    libkrb5-dev \
    libxml2-dev \
    libxslt1-dev \
    python-dev \
    python-pip \
    python3-dev \
    python3-pip \
    zlib1g-dev \
  && rm -rf /var/lib/apt/lists/* \
  \
  && pip3 install setuptools \
  && pip3 install wheel \
  && pip3 install pyyaml \
  \
  && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
  && unzip awscliv2.zip \
  && sudo ./aws/install \
  && rm -rf ./aws awscliv2.zip \
  \
  && pip3 install aws-adfs \
  \
  && curl -Os "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" \
  && unzip "terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -d /usr/bin \
  && rm -f "terraform_${TERRAFORM_VERSION}_linux_amd64.zip" \
  && command -v terraform && terraform --version \
  \
  && curl -Os "https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip" \
  && unzip "vault_${VAULT_VERSION}_linux_amd64.zip" -d /usr/bin \
  && rm -f "vault_${VAULT_VERSION}_linux_amd64.zip" \
  && command -v vault && vault --version \
  \
  && ls -lahF --time-style=long-iso --color "/usr/bin" \
  \
  # Install user/app dependencies.
  && gem install \
    bundler \
    jekyll \
    travis \
  \
  && npm i -g --unsafe \
    @angular/cli \
    @commitlint/cli \
    @commitlint/config-conventional \
    commitizen \
    commitlint-config-awesome \
    cucumber \
    cz-conventional-changelog \
    generator-repo \
    gulp \
    markdownlint-cli \
    nx \
    puppeteer \
    semver \
    serverless \
    sonarlint \
    typescript \
    yo \
  && npm cache clean -g -f < /dev/null 2> /dev/null \
  && echo "$(npm list -g --depth=0 < /dev/null 2> /dev/null)" \
  && echo '{ "path": "cz-conventional-changelog" }' > "/home/${USER_NAME}/.czrc" \
  \
  # Create work directory.
  && mkdir -p "${WORK_DIR}" \
  && chown -R "${USER_NAME}:${GROUP_NAME}" "${WORK_DIR}" \
  && ls -lahF --time-style=long-iso --color "${WORK_DIR}/.." \
  ;

# Copy config/settings.
COPY "settings/maven-settings-docker.xml" "${MAVEN_HOME}/ref/settings-docker.xml"

# Copy dotfiles.
COPY --chown=${USER_NAME}:${GROUP_NAME} dotfiles "/home/${USER_NAME}/dotfiles/"

# Symlink dotfiles.
RUN set -x; \
  # symlink_dotfiles; \
  ls -lahFR --time-style=long-iso --color "/home/${USER_NAME}"; \
  for src in $(find -H "/home/${USER_NAME}/dotfiles" -maxdepth 2 -name "*.symlink" -not -path "*.git*"); do \
    symlink="/home/${USER_NAME}/.$(basename "${src%.*}")"; \
    [[ -f "${symlink}" ]] && mv "${symlink}" "${symlink}.backup"; \
    ln -s "$src" "${symlink}" \
      && chmod 755 "${symlink}" \
      && chown -R "${USER_NAME}:${GROUP_NAME}" "${symlink}"; \
  done; \
  ls -lahF --time-style=long-iso --color "/home/${USER_NAME}";

USER "${USER_NAME}"

WORKDIR "${WORK_DIR}"

VOLUME ["${WORK_DIR}"]

COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["bash"]
